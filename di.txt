// 1 mochila abce

#include <iostream>
#include <vector>
#include <algorithm>
#include <set>

using namespace std;

int mochila(int W, vector<int>& weights, vector<int>& benefits) {
    int n = weights.size();
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));

    for (int i = 1; i <= n; ++i) {
        for (int w = 0; w <= W; ++w) {
            if (weights[i - 1] <= w) {
                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + benefits[i - 1]);
            }
            else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }
    return dp[n][W];
}

void todo(int W, vector<int>& weights, vector<int>& benefits) {
    int n = weights.size();
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));
    vector<vector<set<int>>> solutions(n + 1, vector<set<int>>(W + 1));

    for (int i = 1; i <= n; ++i) {
        for (int w = 0; w <= W; ++w) {
            if (weights[i - 1] <= w) {
                if (dp[i - 1][w] > dp[i - 1][w - weights[i - 1]] + benefits[i - 1]) {
                    dp[i][w] = dp[i - 1][w];
                    solutions[i][w] = solutions[i - 1][w];
                } else if (dp[i - 1][w] < dp[i - 1][w - weights[i - 1]] + benefits[i - 1]) {
                    dp[i][w] = dp[i - 1][w - weights[i - 1]] + benefits[i - 1];
                    solutions[i][w] = solutions[i - 1][w - weights[i - 1]];
                    solutions[i][w].insert(i - 1);
                } else {
                    dp[i][w] = dp[i - 1][w];
                    solutions[i][w] = solutions[i - 1][w];
                    solutions[i][w].insert(solutions[i - 1][w - weights[i - 1]].begin(), solutions[i - 1][w - weights[i - 1]].end());
                    solutions[i][w].insert(i - 1);
                }
            } else {
                dp[i][w] = dp[i - 1][w];
                solutions[i][w] = solutions[i - 1][w];
            }
        }
    }

    // Imprimir todas las soluciones óptimas
    set<int> optimalItems = solutions[n][W];
    for (auto item : optimalItems) {
        cout << item + 1 << " ";
    }
    cout << endl;
}

int main() {
    vector<int> weights = { 3, 7, 4, 2, 1, 6 };
    vector<int> benefits = { 12, 3, 7, 4, 3, 8 };
    int W = 15;
    cout << "Max beneficio: " << mochila(W, weights, benefits) << endl;
    return 0;
}


//2 alfabeto


#include <iostream>
#include <vector>
#include <map>
using namespace std;


vector<char> alfabeto = { 'a', 'b', 'c', 'd' };
map<char, int> orden = { {'a', 0}, {'b', 1}, {'c', 2}, {'d', 3} };

bool f(char x, char y) {
    return orden[x] + 1 == orden[y];
}


bool precedeonoprecede(char u, char v) {
    int n = alfabeto.size();
    vector<vector<bool>> dp(n, vector<bool>(n, false));

    for (int i = 0; i < n; ++i) {
        for (int j = i + 1; j < n; ++j) {
            if (f(alfabeto[i], alfabeto[j])) {
                dp[orden[alfabeto[i]]][orden[alfabeto[j]]] = true;
            }
        }
    }

    return dp[orden[u]][orden[v]];
}

int main() {
    char u = 'a';
    char v = 'd';
    if (precedeonoprecede(u, v)) 
        cout << "la '" << u << "' precede directamente a la '" << v << "'";
    else cout << "la '" << u << "' no precede directamente a la '" << v << "'";
    return 0;
}

//4 subsecuencia de max longitud

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> subsecuencia(vector<int>& V) {
    int n = V.size();
    if (n == 0) return {};

    vector<int> dp(n, 1);
    vector<int> previous(n, -1);

    int maxLength = 1;
    int maxIndex = 0;

    // Llenar el arreglo dp
    for (int i = 1; i < n; ++i) {
        for (int j = 0; j < i; ++j) {
            if (V[j] < V[i] && dp[i] < dp[j] + 1) {
                dp[i] = dp[j] + 1;
                previous[i] = j;
            }
        }
        if (dp[i] > maxLength) {
            maxLength = dp[i];
            maxIndex = i;
        }
    }

    vector<int> lis;
    for (int i = maxIndex; i >= 0; i = previous[i]) {
        lis.push_back(V[i]);
        if (previous[i] == -1) break;
    }
    reverse(lis.begin(), lis.end());

    return lis;
}

int main() {
    vector<int> V = { 11, 17, 5, 8, 6, 4, 7, 12, 3 };
    vector<int> lis = subsecuencia(V);

    cout << "La secuencia creciente de máxima longitud es: ";
    for (int num : lis) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}

//10 recursos

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;


int maxbeneficio(int n, int r, const vector<vector<int>>& N) {
    vector<vector<int>> dp(r + 1, vector<int>(n + 1, 0));

    for (int i = 1; i <= r; ++i) {
        for (int j = 0; j <= n; ++j) {
            dp[i][j] = dp[i - 1][j];
            for (int k = 0; k <= j; ++k) {
                dp[i][j] = max(dp[i][j], dp[i - 1][j - k] + N[i - 1][k]);
            }
        }
    }

    return dp[r][n];
}

int main() {
    int n = 5;
    int r = 3;

    vector<vector<int>> N = {
        {0, 1, 2, 3, 4, 5},
        {0, 2, 4, 6, 8, 10},
        {0, 1, 3, 6, 10, 15}
    };

    int max_benefit = maxbeneficio(n, r, N);

    cout << "beneficio maximo: " << max_benefit << endl;

    return 0;
}
